/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package edu.neu.info5100.components;

import edu.neu.info5100.database.DB;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author sidb
 */
public class OrgMembersPage extends javax.swing.JPanel {

    /**
     * Creates new form OrgMembersPage
     */
    public OrgMembersPage() {
        initComponents();
        loadTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Delete = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(242, 242, 242)
                        .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(155, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(122, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:DELETE FROM organization WHERE id=0;
        
        System.out.println(String.valueOf(
              jTable1.getValueAt(
                jTable1.getSelectedRow(),
                0
              )
            ));
        
            Connection conn = new DB().connection();

         PreparedStatement pstm;
        try {
            pstm = conn.prepareStatement(
                    "DELETE FROM organization WHERE name = ?;"
            );
        
            
            
                    String username = String.valueOf(
              jTable1.getValueAt(
                jTable1.getSelectedRow(),
                0
              )
            );
                          pstm.setString(  1,username );      
                          System.out.println(pstm);
        int rs = pstm.executeUpdate();
        loadTable();
     JOptionPane.showMessageDialog(
          null,
          "Org Deleted"
        );

        } catch (SQLException ex) {
            Logger.getLogger(OrgMembersPage.class.getName()).log(Level.SEVERE, null, ex);
        }

           
     
  
    }//GEN-LAST:event_DeleteActionPerformed
public void loadTable() {
    Connection conn = new DB().connection();

    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("Name");
    model.addColumn("Organisation");
    model.addColumn("Enterprise");
    model.addColumn("oID");
    model.addColumn("eID");

    try {
      PreparedStatement pstm = conn.prepareStatement(
        "SELECT o.name AS organization, e.name as enterprise, o.id as oid, e.id as eid FROM organization o INNER JOIN enterprise e ON o.enterprise_id = e.id "
      );
      //      System.out.println(pstm);
      ResultSet Rs = pstm.executeQuery();

      while (Rs.next()) {
        model.addRow(
          new Object[] {
            Rs.getString("organization"),
            Rs.getString("enterprise"),
            Rs.getString("oid"),
            Rs.getString("eid"),
          }
        );
      }
    } catch (Exception e) {
      System.out.println(e.getMessage());
    }
    jTable1.setModel(model);

    model.addTableModelListener(
      new TableModelListener() {
        public void tableChanged(TableModelEvent e) {
          PreparedStatement pstm;

          if (e.getType() == TableModelEvent.UPDATE) {
            DefaultTableModel model = (DefaultTableModel) (
              (TableModel) (e.getSource())
            );
            int rr = e.getFirstRow();
            int col = e.getColumn();

            String newString = String.valueOf(
              model.getValueAt(
                jTable1.getSelectedRow(),
                jTable1.getSelectedColumn()
              )
            );
            String username = model.getValueAt(rr, 2).toString();

            if (col == 0) {
              try {
                pstm =
                  conn.prepareStatement(
                    "UPDATE organization SET name=? WHERE id='" +
                    username +
                    "'"
                  );

                pstm.setString(1, newString);
                //  pstm.executeUpdate();
                //                                                                                System.out.println(pstm);
                pstm.executeUpdate();
              } catch (SQLException ex) {
                Logger
                  .getLogger(AdminUsersCrud.class.getName())
                  .log(Level.SEVERE, null, ex);
              }
            }
//            if (col == 1) {
//              try {
//                pstm =
//                  conn.prepareStatement(
//                    "UPDATE userdetails SET mobile=? WHERE  username='" +
//                    username +
//                    "'"
//                  );
//                pstm.setInt(1, Integer.parseInt(newString));
//                pstm.executeUpdate();
//              } catch (SQLException ex) {
//                Logger
//                  .getLogger(AdminUsersCrud.class.getName())
//                  .log(Level.SEVERE, null, ex);
//              }
//            }
//            if (col == 2) {
//              try {
//                pstm =
//                  conn.prepareStatement(
//                    "UPDATE userdetails SET age=? WHERE  username='" +
//                    username +
//                    "'"
//                  );
//                pstm.setInt(1, Integer.parseInt(newString));
//                pstm.executeUpdate();
//              } catch (SQLException ex) {
//                Logger
//                  .getLogger(AdminUsersCrud.class.getName())
//                  .log(Level.SEVERE, null, ex);
//              }
//            }
//            if (col == 4) {
//              try {
//                pstm =
//                  conn.prepareStatement(
//                    "UPDATE userdetails SET gender=? WHERE  username='" +
//                    username +
//                    "'"
//                  );
//                pstm.setString(1, newString);
//                pstm.executeUpdate();
//              } catch (SQLException ex) {
//                Logger
//                  .getLogger(AdminUsersCrud.class.getName())
//                  .log(Level.SEVERE, null, ex);
//              }
//            }
//
//            if (col == 5) {
//              try {
//                pstm =
//                  conn.prepareStatement(
//                    "UPDATE userdetails SET role=? WHERE  username='" +
//                    username +
//                    "'"
//                  );
//                pstm.setString(1, newString);
//              } catch (SQLException ex) {
//                Logger
//                  .getLogger(AdminUsersCrud.class.getName())
//                  .log(Level.SEVERE, null, ex);
//              }
//            }
//
//            if (col == 6) {
//              try {
//                pstm =
//                  conn.prepareStatement(
//                    "UPDATE userdetails SET organization=? WHERE  username='" +
//                    username +
//                    "'"
//                  );
//                pstm.setString(1, newString);
//                pstm.executeUpdate();
//              } catch (SQLException ex) {
//                Logger
//                  .getLogger(AdminUsersCrud.class.getName())
//                  .log(Level.SEVERE, null, ex);
//              }
//            }
//            if (col == 7) {
//              try {
//                pstm =
//                  conn.prepareStatement(
//                    "UPDATE userdetails SET enterprise=? WHERE  username='" +
//                    username +
//                    "'"
//                  );
//
//                pstm.setString(1, newString);
//                pstm.executeUpdate();
//              } catch (SQLException ex) {
//                Logger
//                  .getLogger(AdminUsersCrud.class.getName())
//                  .log(Level.SEVERE, null, ex);
//              }
//            }
          }
        }
      }
    );
  }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
