/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package edu.neu.info5100.components;

import edu.neu.info5100.database.DB;
import edu.neu.info5100.driver.INFO5100Project;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;

/**
 *
 * @author megha
 */
public class DriverManagerCreateRideForDriver extends javax.swing.JPanel {

    /**
     * Creates new form DriverManagerCreateRideForDriver
     */
    public DriverManagerCreateRideForDriver() {
        initComponents();
        loadDriverDropDown();
           LoadPickupDropdown();
    LoadDestinationDropdown();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pickUpDropdown = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        destinationDropDown = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        dateTimePicker1 = new com.github.lgooddatepicker.components.DateTimePicker();
        CreateTripButton = new javax.swing.JButton();
        DriverNameComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();

        jLabel1.setText("From");

        pickUpDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        pickUpDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickUpDropdownActionPerformed(evt);
            }
        });

        jLabel2.setText("To");

        destinationDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Date");

        CreateTripButton.setText("Create Trip");
        CreateTripButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateTripButtonActionPerformed(evt);
            }
        });

        DriverNameComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        DriverNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DriverNameComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setText("Driver Name");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(91, 91, 91)
                                .addComponent(destinationDropDown, 0, 175, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(26, 26, 26)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(DriverNameComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(pickUpDropdown, 0, 173, Short.MAX_VALUE))))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(77, 77, 77)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CreateTripButton)
                            .addComponent(dateTimePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DriverNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pickUpDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(destinationDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(dateTimePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(CreateTripButton)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 521, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 289, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 13, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 14, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void pickUpDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickUpDropdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pickUpDropdownActionPerformed
 private void LoadPickupDropdown() {
    Connection conn = new DB().connection();
    try {
      pickUpDropdown.removeAllItems();

      PreparedStatement pstm = conn.prepareStatement(
        "SELECT Distinct fromLocation FROM locations"
      );
      ResultSet rs = pstm.executeQuery();
      while (rs.next()) {
        String doc = rs.getString("fromLocation");
        //                DefaultComboBoxModel model = (DefaultComboBoxModel)comboBox1.getModel();

        pickUpDropdown.addItem(doc);
      }
    } catch (Exception e) {
      System.out.println("null");
    }
  }
private boolean CheckIfTripinProgress() {
    Connection conn = new DB().connection();
           
    try {
      PreparedStatement pstm = conn.prepareStatement(
        "SELECT status, drivername from cabrides WHERE drivername=? AND status ='InProgress';"
      );
       pstm.setString(
          1,
          String.valueOf(DriverNameComboBox.getSelectedItem())
        );
      ResultSet rs = pstm.executeQuery();
      while (rs.next()) {
        //        rideIDVal.setText(rs.getString("rideid"));
        //        pickupLabel.setText(rs.getString("fromLocation"));
        //        DestinationLabel.setText(rs.getString("toLocation"));
        //        StatusText.setText(rs.getString("status"));

        //                DefaultComboBoxModel model = (DefaultComboBoxModel)comboBox1.getModel();
        if (rs.getString("status").equals("InProgress")) {
          return true;
        }
      }
    } catch (Exception e) {
      System.out.println("null");
    }
    return false;
  }
  private void LoadDestinationDropdown() {
    Connection conn = new DB().connection();
    try {
      destinationDropDown.removeAllItems();

      PreparedStatement pstm = conn.prepareStatement(
        "SELECT Distinct toLocation FROM locations"
      );
      ResultSet rs = pstm.executeQuery();
      while (rs.next()) {
        String doc = rs.getString("toLocation");
        //                DefaultComboBoxModel model = (DefaultComboBoxModel)comboBox1.getModel();

        destinationDropDown.addItem(doc);
      }
    } catch (Exception e) {
      System.out.println("null");
    }
  }
    private void CreateTripButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateTripButtonActionPerformed
//        // TODO add your handling code here:
        System.out.println(  "Created New Trip for" +   dateTimePicker1.datePicker.toString()+ " "+ dateTimePicker1.timePicker.toString());

        Connection conn = new DB().connection();
        
        if (CheckIfTripinProgress()) {
            JOptionPane.showMessageDialog(
                null,
                "You can create only one ride for a driver at a time. Please ask the driver to complete the existing ride before creating new ride"
            );
        }else{

            try {
                PreparedStatement pstm = conn.prepareStatement(
                    "INSERT INTO cabrides (drivername, fromLocation, toLocation, date, time, status) VALUES(?, ?, ?,?,?,?);"
                );
                pstm.setString(
                    1,
                    String.valueOf(DriverNameComboBox.getSelectedItem())
                );
                pstm.setString(2, String.valueOf(pickUpDropdown.getSelectedItem()));
                pstm.setString(3, String.valueOf(destinationDropDown.getSelectedItem()));
                pstm.setString(4, dateTimePicker1.datePicker.toString());
                pstm.setString(5, dateTimePicker1.timePicker.toString());
                pstm.setString(6, "InProgress");

                System.out.println(pstm);
                pstm.executeUpdate();

                //                }
            JOptionPane.showMessageDialog(
                null,
                "Trip Creation Successfull"
            );
        } catch (Exception e3) {
            System.out.println(e3);
        }
        }

    }//GEN-LAST:event_CreateTripButtonActionPerformed

    private void DriverNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DriverNameComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DriverNameComboBoxActionPerformed

   

    private void loadDriverDropDown(){
        DriverNameComboBox.removeAllItems();
        Connection conn = new DB().connection();
    try {

      PreparedStatement pstm = conn.prepareStatement(
        "SELECT name FROM userdetails where role='driver';"
      );
      
            System.out.println(pstm);

      ResultSet rs = pstm.executeQuery();
    
      while (rs.next()) {
          DriverNameComboBox.addItem((rs.getString("name")));
          

      }
    } catch (Exception e) {
      System.out.println(e);
    }
 
}
//
// private boolean CheckIfTripinProgress() {
//    Connection conn = new DB().connection();
//    try {
//      PreparedStatement pstm = conn.prepareStatement(
//        "SELECT status, drivername from cabrides WHERE drivername=? AND status ='InProgress';"
//      );
//       pstm.setString(
//          1,
//          String.valueOf(INFO5100Project.getSession().GetUsername())
//        );
//      ResultSet rs = pstm.executeQuery();
//      while (rs.next()) {
//        //        rideIDVal.setText(rs.getString("rideid"));
//        //        pickupLabel.setText(rs.getString("fromLocation"));
//        //        DestinationLabel.setText(rs.getString("toLocation"));
//        //        StatusText.setText(rs.getString("status"));
//
//        //                DefaultComboBoxModel model = (DefaultComboBoxModel)comboBox1.getModel();
//        if (rs.getString("status").equals("InProgress")) {
//          return true;
//        }
//      }
//    } catch (Exception e) {
//      System.out.println("null");
//    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateTripButton;
    private javax.swing.JComboBox<String> DriverNameComboBox;
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePicker1;
    private javax.swing.JComboBox<String> destinationDropDown;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> pickUpDropdown;
    // End of variables declaration//GEN-END:variables
}
