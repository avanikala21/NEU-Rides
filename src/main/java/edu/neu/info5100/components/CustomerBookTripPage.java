/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package edu.neu.info5100.components;

import edu.neu.info5100.database.DB;
import edu.neu.info5100.driver.INFO5100Project;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sidb
 */
public class CustomerBookTripPage extends javax.swing.JPanel {

  /**
   * Creates new form CustomerBookTripPage
   */
  public CustomerBookTripPage() {
    initComponents();
    LoadPickupDropdown();
    LoadDestinationDropdown();
    //        loadTable();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        SearchCabsButton = new javax.swing.JButton();
        DestinationDropDown = new javax.swing.JComboBox<>();
        PickUpDropDown = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        BookCabButton = new javax.swing.JButton();

        jLabel1.setText("Pick up");

        jLabel2.setText("Destination");

        SearchCabsButton.setText("Seach Cabs");
        SearchCabsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchCabsButtonActionPerformed(evt);
            }
        });

        DestinationDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        PickUpDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "id", "Driver", "From", "To", "Date", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        BookCabButton.setText("Book Cab");
        BookCabButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookCabButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(81, 81, 81)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(DestinationDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PickUpDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SearchCabsButton)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BookCabButton, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(PickUpDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(DestinationDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(SearchCabsButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BookCabButton)
                .addGap(48, 48, 48))
        );
    }// </editor-fold>//GEN-END:initComponents

  private void SearchCabsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchCabsButtonActionPerformed
    // TODO add your handling code here:
    loadTable();
  }//GEN-LAST:event_SearchCabsButtonActionPerformed

  private boolean CheckIfBooked() {
    Connection conn = new DB().connection();
    try {
      PreparedStatement pstm = conn.prepareStatement(
        "SELECT b.fromLocation ,b.toLocation, b.rideid, c.status  from bookings b LEFT JOIN cabrides c ON b.rideid = c.id WHERE c.status ='InProgress' and b.customerusername=?;"
      );
      pstm.setString(1,INFO5100Project.getSession().GetUsername());
      ResultSet rs = pstm.executeQuery();
      while (rs.next()) {
        //        rideIDVal.setText(rs.getString("rideid"));
        //        pickupLabel.setText(rs.getString("fromLocation"));
        //        DestinationLabel.setText(rs.getString("toLocation"));
        //        StatusText.setText(rs.getString("status"));

        //                DefaultComboBoxModel model = (DefaultComboBoxModel)comboBox1.getModel();
        System.out.println("In Loop");
        if (rs.getString("status").equals("InProgress")) {
          return true;
        }
        System.out.println(rs.getString("status"));
      }
    } catch (Exception e) {
      System.out.println("null");
    }
    return false;
  }

  private void BookCabButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookCabButtonActionPerformed
    // TODO add your handling code here:

    if (CheckIfBooked()) {
      JOptionPane.showMessageDialog(
        null,
        "You can book only one cab at a time. Please complete the existing ride before booking new ride"
      );
    } else {
      int column = 0;
      int row = jTable1.getSelectedRow();
      String rideid = jTable1.getModel().getValueAt(row, column).toString();
      String frm = jTable1.getModel().getValueAt(row, 2).toString();
      String tol = jTable1.getModel().getValueAt(row, 3).toString();

      System.out.println("Ride Booked for Ride ID " + rideid);
      Connection conn = new DB().connection();
      try {
        PreparedStatement pstm = conn.prepareStatement(
          "INSERT INTO bookings (customerusername, customerid, fromLocation, toLocation, rideid) VALUES(?, ?, ?,?,?);"
        );
        pstm.setString(
          1,
          String.valueOf(INFO5100Project.getSession().GetUsername())
        );
        pstm.setInt(2, INFO5100Project.getSession().GetId());
        pstm.setString(3, frm);
        pstm.setString(4, tol);
        pstm.setString(5, rideid);

        System.out.println(pstm);
        pstm.executeUpdate();

        //                }
        JOptionPane.showMessageDialog(
          null,
          "Cab Booking Successful check current Trip for more information"
        );
      } catch (Exception e3) {
        System.out.println("null");
      }
    }
  }//GEN-LAST:event_BookCabButtonActionPerformed

  private void LoadPickupDropdown() {
    Connection conn = new DB().connection();
    try {
      PickUpDropDown.removeAllItems();

      PreparedStatement pstm = conn.prepareStatement(
        "SELECT Distinct fromLocation FROM cabrides"
      );
      ResultSet rs = pstm.executeQuery();
      while (rs.next()) {
        String doc = rs.getString("fromLocation");
        //                DefaultComboBoxModel model = (DefaultComboBoxModel)comboBox1.getModel();

        PickUpDropDown.addItem(doc);
      }
    } catch (Exception e) {
      System.out.println("null");
    }
  }

  private void LoadDestinationDropdown() {
    Connection conn = new DB().connection();
    try {
      DestinationDropDown.removeAllItems();

      PreparedStatement pstm = conn.prepareStatement(
        "SELECT Distinct toLocation FROM cabrides"
      );
      ResultSet rs = pstm.executeQuery();
      while (rs.next()) {
        String doc = rs.getString("toLocation");
        //                DefaultComboBoxModel model = (DefaultComboBoxModel)comboBox1.getModel();

        DestinationDropDown.addItem(doc);
      }
    } catch (Exception e) {
      System.out.println("null");
    }
  }

  public void loadTable() {
    Connection conn = new DB().connection();

    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("id");

    model.addColumn("Driver Name");
    model.addColumn("From Location");
    model.addColumn("To Location");
    model.addColumn("Date");
    model.addColumn("Time");
    model.addColumn("Status");

    try {
      PreparedStatement pstm = conn.prepareStatement(
        "SELECT id,drivername, fromLocation, toLocation, date, time, status FROM cabrides WHERE fromLocation=? AND toLocation=? AND status='InProgress'"
      );
      pstm.setString(1, String.valueOf(PickUpDropDown.getSelectedItem()));
      pstm.setString(2, String.valueOf(DestinationDropDown.getSelectedItem()));
      ResultSet Rs = pstm.executeQuery();
      while (Rs.next()) {
        model.addRow(
          new Object[] {
            Rs.getString("id"),
            Rs.getString("drivername"),
            Rs.getString("fromLocation"),
            Rs.getString("toLocation"),
            Rs.getString("date"),
            Rs.getString("time"),
            Rs.getString("status"),
          }
        );
      }
    } catch (Exception e) {
      System.out.println(e.getMessage());
    }
    jTable1.setModel(model);
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BookCabButton;
    private javax.swing.JComboBox<String> DestinationDropDown;
    private javax.swing.JComboBox<String> PickUpDropDown;
    private javax.swing.JButton SearchCabsButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
